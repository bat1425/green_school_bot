import json
import os
import pandas as pd
from typing import Tuple, Optional
from config import EXCEL_WEEKLY, EXCEL_MONTHLY, BINDINGS_FILE

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def clean_phone(phone: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã, —Å–∫—Ä—ã—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ."""
    return phone.strip().replace(' ', '').replace('\u200b', '')

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞–±–æ—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_bindings() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–≤—è–∑–æ–∫ chat_id ‚Üí —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ JSON."""
    if os.path.exists(BINDINGS_FILE):
        try:
            with open(BINDINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            return {}
    return {}

def save_bindings(bindings: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ chat_id ‚Üí —Ç–µ–ª–µ—Ñ–æ–Ω –≤ JSON."""
    with open(BINDINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(bindings, f, ensure_ascii=False, indent=2)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞ –∏–∑ Excel ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_student_data(phone: str) -> Tuple[Optional[pd.DataFrame], Optional[pd.DataFrame]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel-—Ñ–∞–π–ª –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤–µ—Å—å DataFrame, —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º).
    """
    if not phone or not os.path.exists(EXCEL_WEEKLY):
        return None, None

    df = pd.read_excel(EXCEL_WEEKLY, dtype={'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è': str})

    if '–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è' not in df.columns:
        return df, None

    df['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'] = df['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'].astype(str).apply(clean_phone)
    phone_clean = clean_phone(phone)

    matched_rows = df[df['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'] == phone_clean]
    return df, matched_rows

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def format_results(name: str, data: pd.Series) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Telegram —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —É—á–µ–Ω–∏–∫–∞.
    """
    subject_emojis = {
        '—Ç–∞–¥–∂–∏–∫—Å–∫–∏–π —è–∑—ã–∫': 'üìö',
        '–±–∏–æ–ª–æ–≥–∏—è': 'üå±',
        '—Ö–∏–º–∏—è': 'üß™',
        '—Ñ–∏–∑–∏–∫–∞': '‚ö°Ô∏è',
        '–æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç': 'üìä'
    }

    results = data.drop(['–ò–º—è —É—á–µ–Ω–∏–∫–∞', '–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'], errors='ignore')
    results_percent = {}

    for subject, mark in results.items():
        subject_clean = subject.strip().lower()
        try:
            percent = float(mark)
            results_percent[subject_clean] = (
                f"{round(percent * 100)}%" if percent <= 1 else f"{round(percent)}%"
            )
        except (ValueError, TypeError):
            results_percent[subject_clean] = str(mark)

    text = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–µ–¥—à–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è {name}:*\n\n"
    for subject, mark in results_percent.items():
        emoji = subject_emojis.get(subject, 'üîπ')
        text += f"{emoji} {subject.capitalize()}: {mark}\n"

    return text

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_monthly_data(path: Optional[str] = None) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π Excel-—Ñ–∞–π–ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ DataFrame.
    """
    path = path or EXCEL_MONTHLY
    if not os.path.exists(path):
        return pd.DataFrame()

    df = pd.read_excel(path, header=None)

    data = {
        '–ò–º—è —É—á–µ–Ω–∏–∫–∞': df.loc[4:, 1],
        '–¢–∞–¥–∂–∏–∫—Å–∫–∏–π —è–∑—ã–∫': df.loc[4:, 4],
        '–ë–∏–æ–ª–æ–≥–∏—è': df.loc[4:, 7],
        '–•–∏–º–∏—è': df.loc[4:, 10],
        '–§–∏–∑–∏–∫–∞': df.loc[4:, 13],
        '–û–±—â–∏–π –±–∞–ª–ª': df.loc[4:, 14],
        '–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç': df.loc[4:, 15],
    }

    result_df = pd.DataFrame(data)
    result_df = result_df.dropna(subset=['–ò–º—è —É—á–µ–Ω–∏–∫–∞']).reset_index(drop=True)
    return result_df

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∏—Å–∫ chat_id –ø–æ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def find_chat_id_by_name(name: str, bindings: dict, student_df: pd.DataFrame) -> Optional[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç chat_id –ø–æ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.
    """
    matches = student_df[student_df['–ò–º—è —É—á–µ–Ω–∏–∫–∞'].str.lower() == name.lower()]
    if matches.empty:
        return None

    phone = matches.iloc[0]['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è']
    phone_clean = clean_phone(phone)

    for chat_id, bound_phone in bindings.items():
        if clean_phone(bound_phone) == phone_clean:
            return chat_id
    return None
