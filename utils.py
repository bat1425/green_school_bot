import json
import os
import pandas as pd
from config import EXCEL_WEEKLY, BINDINGS_FILE


def load_bindings():
    if os.path.exists(BINDINGS_FILE):
        try:
            with open(BINDINGS_FILE, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError:
            return {}
    return {}


def save_bindings(bindings):
    with open(BINDINGS_FILE, 'w') as f:
        json.dump(bindings, f)


def get_student_data(phone):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç weekly Excel –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π DataFrame –∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    if not os.path.exists(EXCEL_WEEKLY):
        return None, None

    df = pd.read_excel(EXCEL_WEEKLY, dtype={'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è': str})
    # –æ—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞
    df['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'] = (
        df['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è']
        .astype(str)
        .str.strip()
        .str.replace(' ', '', regex=False)
        .str.replace('\u200b', '', regex=False)
    )
    phone_clean = phone.strip().replace(' ', '').replace('\u200b', '')

    # –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {df['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'].tolist()}")
    print(f"–ò—â–µ–º –Ω–æ–º–µ—Ä: {phone_clean}")

    rows = df[df['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'] == phone_clean]
    return df, rows


def format_results(name, data, emoji="üîπ"):
    results = data.drop(['–ò–º—è —É—á–µ–Ω–∏–∫–∞', '–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'], errors='ignore')
    text = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {name}:*\n"
    for subject, mark in results.items():
        text += f"{emoji} {subject}: {mark}\n"
    return text


def load_monthly_data(path=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∏–∑ Excel (B5, E5, H5, K5, N5, O5, P5 –∏ –¥–∞–ª–µ–µ).
    """
    path = path or EXCEL_MONTHLY
    df = pd.read_excel(path, header=None)
    data = {
        '–ò–º—è —É—á–µ–Ω–∏–∫–∞': df.loc[4:, 1],
        '–¢–∞–¥–∂–∏–∫—Å–∫–∏–π': df.loc[4:, 4],
        '–ë–∏–æ–ª–æ–≥–∏—è': df.loc[4:, 7],
        '–•–∏–º–∏—è': df.loc[4:, 10],
        '–§–∏–∑–∏–∫–∞': df.loc[4:, 13],
        '–û–±—â–∏–π –±–∞–ª–ª': df.loc[4:, 14],
        '–ü—Ä–æ—Ü–µ–Ω—Ç': df.loc[4:, 15],
    }
    r = pd.DataFrame(data)
    r = r.dropna(subset=['–ò–º—è —É—á–µ–Ω–∏–∫–∞']).reset_index(drop=True)
    return r


def find_chat_id_by_name(name, bindings, student_df):
    """
    –ù–∞—Ö–æ–¥–∏—Ç chat_id –ø–æ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ bindings –∏ student_df.
    student_df –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ò–º—è —É—á–µ–Ω–∏–∫–∞' –∏ '–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'.
    """
    matches = student_df[student_df['–ò–º—è —É—á–µ–Ω–∏–∫–∞'].str.lower() == name.lower()]
    if matches.empty:
        return None
    phone = matches.iloc[0]['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è']
    for cid, p in bindings.items():
        if p.strip() == phone.strip():
            return cid
    return None