import os
import json
import pandas as pd
import telebot
from telebot import types
from datetime import datetime
from config import BOT_TOKEN, ADMIN_ID, EXCEL_WEEKLY, EXCEL_MONTHLY
from utils import (
    load_bindings, save_bindings,
    get_student_data, format_results,
    load_monthly_data, find_chat_id_by_name
)
from db import init_db, save_weekly_results, get_monthly_results
from report import generate_progress_pdf
from apscheduler.schedulers.background import BackgroundScheduler

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(BOT_TOKEN)
init_db()
if not os.path.exists('temp'):
    os.makedirs('temp')

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
def weekly_broadcast():
    bindings = load_bindings()
    df, _ = get_student_data("")
    if df is None:
        return 0
    count = 0
    for cid, phone in bindings.items():
        _, rows = get_student_data(phone)
        if rows.empty:
            continue
        for _, row in rows.iterrows():
            name = row['–ò–º—è —É—á–µ–Ω–∏–∫–∞']
            results = row.drop(['–ò–º—è —É—á–µ–Ω–∏–∫–∞', '–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è']).to_dict()
            save_weekly_results(name, results)
            text = f"üìÖ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è *{name}*:\n" + format_results(name, row, emoji='üß™')
            try:
                bot.send_message(cid, text, parse_mode='Markdown')
                count += 1
            except:
                pass
    return count

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def handle_start(message):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/register ‚Äî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "/results ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n"
        "/progress ‚Äî PDF-–ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –º–µ—Å—è—Ü\n"
        "(–¥–ª—è –∞–¥–º–∏–Ω–∞) /broadcast, /monthly_report\n"
    )
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['register'])
def handle_register(message):
    msg = bot.send_message(message.chat.id, "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+992...):")
    bot.register_next_step_handler(msg, register_phone)

def register_phone(message):
    phone = message.text.strip()
    chat_id = str(message.chat.id)
    if not phone.startswith('+992'):
        bot.send_message(chat_id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /register.")
        return
    bindings = load_bindings()
    bindings[chat_id] = phone
    save_bindings(bindings)
    bot.send_message(chat_id, "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

@bot.message_handler(commands=['results'])
def handle_results(message):
    chat_id = str(message.chat.id)
    bindings = load_bindings()
    if chat_id not in bindings:
        bot.send_message(chat_id, "‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /register")
        return
    phone = bindings[chat_id]
    df, rows = get_student_data(phone)
    if df is None:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç weekly –¥–∞–Ω–Ω—ã—Ö. –ê–¥–º–∏–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª.")
        return
    if rows.empty:
        bot.send_message(chat_id, "üôÅ –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    for _, row in rows.iterrows():
        bot.send_message(
            chat_id,
            format_results(row['–ò–º—è —É—á–µ–Ω–∏–∫–∞'], row),
            parse_mode='Markdown'
        )

@bot.message_handler(commands=['broadcast'])
def handle_broadcast(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç.")
        return
    count = weekly_broadcast()
    bot.reply_to(message, f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")

@bot.message_handler(commands=['monthly_report'])
def handle_monthly_report(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç.")
        return
    try:
        monthly_df = load_monthly_data(EXCEL_MONTHLY)
        student_df = pd.read_excel(EXCEL_WEEKLY, dtype={'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è': str})
        student_df['–ò–º—è —É—á–µ–Ω–∏–∫–∞'] = student_df['–ò–º—è —É—á–µ–Ω–∏–∫–∞'].str.strip()
        student_df['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'] = student_df['–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'].str.strip()
        bindings = load_bindings()
        sent = 0
        for _, row in monthly_df.iterrows():
            name = str(row['–ò–º—è —É—á–µ–Ω–∏–∫–∞']).strip()
            cid = find_chat_id_by_name(name, bindings, student_df)
            if not cid:
                continue
            text = (
                f"üìÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è *{name}*:\n"
                f"üìö –¢–∞–¥–∂–∏–∫—Å–∫–∏–π: {row['–¢–∞–¥–∂–∏–∫—Å–∫–∏–π']}\n"
                f"üå± –ë–∏–æ–ª–æ–≥–∏—è: {row['–ë–∏–æ–ª–æ–≥–∏—è']}\n"
                f"üß™ –•–∏–º–∏—è: {row['–•–∏–º–∏—è']}\n"
                f"‚ö°Ô∏è –§–∏–∑–∏–∫–∞: {row['–§–∏–∑–∏–∫–∞']}\n"
                f"üìä –û–±—â–∏–π –±–∞–ª–ª: {row['–û–±—â–∏–π –±–∞–ª–ª']}\n"
                f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç: {row['–ü—Ä–æ—Ü–µ–Ω—Ç']}"
            )
            bot.send_message(cid, text, parse_mode='Markdown')
            sent += 1
        bot.reply_to(message, f"‚úÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sent}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['progress'])
def handle_progress(message):
    chat_id = str(message.chat.id)
    bindings = load_bindings()
    if chat_id not in bindings:
        bot.send_message(chat_id, "‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /register")
        return
    phone = bindings[chat_id]
    _, rows = get_student_data(phone)
    if rows.empty:
        bot.send_message(chat_id, "üôÅ –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    for _, row in rows.iterrows():
        name = row['–ò–º—è —É—á–µ–Ω–∏–∫–∞']
        raw = get_monthly_results(name)
        
        print(get_monthly_results(name))

        if not raw:
            bot.send_message(chat_id, "üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü.")
            return
        recs = []
        curr = None
        group = {}
        for subj, mark, date in raw:
            if date != curr:
                if group:
                    recs.append({'date': curr, 'subjects': group.copy()})
                curr = date
                group = {}
            group[subj] = mark
        if group:
            recs.append({'date': curr, 'subjects': group.copy()})
        pdf_path = generate_progress_pdf(name, recs)
        with open(pdf_path, 'rb') as f:
            bot.send_document(chat_id, f)

def process_weekly_file(file_path):
    df = pd.read_excel(file_path, dtype=str)
    date_str = datetime.now().strftime("%Y-%m-%d")
    for _, row in df.iterrows():
        name = row.get('–ò–º—è —É—á–µ–Ω–∏–∫–∞')
        if not name:
            continue
        results = row.drop(labels=['–ò–º—è —É—á–µ–Ω–∏–∫–∞', '–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'], errors='ignore').to_dict()
        save_weekly_results(name, results, date_str)

@bot.message_handler(content_types=['document'])
def handle_file_upload(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã.")
        return

    file_name = message.document.file_name.lower()
    print("üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:", file_name)

    if 'week' in file_name or '–Ω–µ–¥–µ–ª—è' in file_name:
        path = EXCEL_WEEKLY
        label = '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π'
    elif 'month' in file_name or '–º–µ—Å—è—Ü' in file_name or '–∏—Ç–æ–≥' in file_name:
        path = EXCEL_MONTHLY
        label = '–µ–∂–µ–º–µ—Å—è—á–Ω—ã–π'
    else:
        bot.reply_to(message, "‚ö†Ô∏è –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'week'/'–Ω–µ–¥–µ–ª—è' –∏–ª–∏ 'month'/'–º–µ—Å—è—Ü'/'–∏—Ç–æ–≥'.")
        return

    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded = bot.download_file(file_info.file_path)
        with open(path, 'wb') as f:
            f.write(downloaded)
        bot.reply_to(message, f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ *{label}* (`{path}`).", parse_mode='Markdown')

        # –ï—Å–ª–∏ —ç—Ç–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
        if label == '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π':
            process_weekly_file(path)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()
scheduler.add_job(weekly_broadcast, 'cron', day_of_week='sun', hour=10, minute=0)
scheduler.start()

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
